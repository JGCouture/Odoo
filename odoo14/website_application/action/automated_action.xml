<?xml version="1.0" encoding="utf-8"?>
<odoo>
	<record id="gdc_pos_create_task_when_sale_order_created" model="base.automation">
		<field name="name">create a task when a sale order is created in GDC POS</field>
		<field name="model_id" ref="sale.model_sale_order"/> <!-- This was the model I used -->
		<field name="state">code</field>
		<field name="code">
gdc_pos_project = env['project.project'].sudo().search([('id','=',60)])
if gdc_pos_project==None:
    raise UserError('GDC POS Board project does not exist')
project_list = {}

for item in record.order_line:
  if gdc_pos_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["gdc_pos_project"] = 1

for key in project_list.keys():
  if key == "gdc_pos_project":
    parent = env['project.task'].sudo().create({
        'project_id': gdc_pos_project.id,
          'name': record.name+": "+record.partner_id.name,
          'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
          'partner_id': int(record.partner_id.id),
          'x_studio_many2one_field_7MRZY':record.id,
          'sale_order_id':record.id,
      })
    env['mail.activity'].create({
        'summary':'financial profile / online setting',
        'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
        'res_id':record.id,
        'res_model_id':466,
        'activity_type_id':4})
          #create a activity to rotate user
    env['mail.activity'].create({
      'summary':'confirm cash discount',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})
    env['mail.activity'].create({
      'summary':'confirm sales tax',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=12),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'menu and configuration',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=12),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})
    env['mail.activity'].create({
      'summary':'pre-approved/paid in full',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
        'summary':'update Lead POS System in IRIS',
        'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
        'res_id':record.id,
        'res_model_id':466,
        'activity_type_id':4})

    env['mail.activity'].create({
    'summary':'prepare hardware',
    'date_deadline':datetime.date.today()+datetime.timedelta(days=14),
    'res_id':record.id,
    'res_model_id':466,
    'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'installment - On Site/Remote',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'ship/pick up',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'training',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'pos live date',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'online order live date',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'saas fee setup (If Apply)',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'first follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=21),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'second follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=28),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})
    env['mail.activity'].create({
      'summary':'third follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=35),
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})</field>

		<field name="active" eval="False"/>
		<field name="trigger">on_write</field>
		<field name="filter_domain">[('company_id', '=', '8'),('state','=', 'sale')]</field>
		<field name="filter_pre_domain">[('company_id', '=', '8')]</field>
	</record>

    <record id="zbspos_create_task_when_sale_order_created" model="base.automation">
		<field name="name">create a task when a sale order is created in ZBS POS</field>
		<field name="model_id" ref="sale.model_sale_order"/> <!-- This was the model I used -->
		<field name="state">code</field>
		<field name="code">

it_board_project = env['project.project'].sudo().search([('id','=',1)])
if not it_board_project:
  raise UserError('IT Implementation Board project does not exist')

pos_bee_project = env['project.project'].sudo().search([('id','=',59)])
if not pos_bee_project:
  raise UserError('POSBEE BOARD project does not exist')

Installment_project = env['project.project'].sudo().search([('id','=',41)])
if not Installment_project:
  raise UserError(' Installment_project  project does not exist')

depolyment_project = env['project.project'].sudo().search([('id','=',29)])
if not depolyment_project:
  raise UserError('depolyment_project does not exist')

website_project = env['project.project'].sudo().search([('id','=',32)])
if not website_project:
  raise UserError('website design project does not exist')

tv_project = env['project.project'].sudo().search([('id','=',34)])
if not tv_project:
  raise UserError('tv project does not exist')

gift_project = env['project.project'].sudo().search([('id','=',33)])
if not gift_project:
  raise UserError('gift card project does not exist')

VAS_update_project = env['project.project'].sudo().search([('id','=',8)])
if not VAS_update_project:
  raise UserError('VAS update project does not exist')

deployment_delivery_order_project = env['project.project'].sudo().search([('id','=',48)])
if not deployment_delivery_order_project:
  raise UserError('deployment delivery order project does not exist')

accounting_project = env['project.project'].sudo().search([('id','=',7)])
if not accounting_project:
  raise UserError('accounting project does not exist')
accounting_user = env['res.users'].sudo().search([('id','=',36)])
if not accounting_user:
  raise UserError('accouting task User  does not exist')

prepare_hardware_user = env['res.users'].sudo().search([('id','=',47)])
if not prepare_hardware_user:
  raise UserError('prepare hardware User Garrett Gannon does not exist')

terminal_project = env['project.project'].sudo().search([('id','=',44)])
if not terminal_project:
  raise UserError('terminal project project does not exist')

gmb_follow_up_project = env['project.project'].sudo().search([('id','=',57)])
if not gmb_follow_up_project:
  raise UserError('gmb follow up project does not exist')

shipped_user = env['res.users'].sudo().search([('id','=',47)])
if not shipped_user:
  raise UserError('shipping User Garrett Gannon does not exist')

user_lisa_li = env['res.users'].sudo().search([('id','=',313)])
if not user_lisa_li:
  raise UserError('GMB project support user Lisa Li does not exist')

user_sammy = env['res.users'].sudo().search([('id','=',25)])
if not user_sammy:
  raise UserError('user sammy does not exist')

user_jenny = env['res.users'].sudo().search([('id','=',174)])
if not user_jenny:
  raise UserError('VAS project update user jennyx does not exist')

user_sasa_liu = env['res.users'].sudo().search([('id','=',26)])
if not user_sasa_liu:
  raise UserError('VAS project user sasa liu does not exist')

user_eric_schofield = env['res.users'].sudo().search([('id','=',104)])
if not user_eric_schofield:
  raise UserError('user eric schofield does not exist')

user_jeff_lim = env['res.users'].sudo().search([('id','=',21)])
if not user_jeff_lim:
  raise UserError('user jeff lim does not exist')

user_mark_kearney = env['res.users'].sudo().search([('id','=',22)])
if not user_mark_kearney:
  raise UserError('user Mark Kearney does not exist')

user_myles_ball = env['res.users'].sudo().search([('id','=',45)])
if not user_myles_ball:
  raise UserError('user myles ball does not exist')
project_list = {}

for item in record.order_line:

  if depolyment_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["depolyment_project"] = 1

  if Installment_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["Installment_project"] = 1

  if website_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["website_project"] = item.product_template_id.name

  if tv_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["tv_project"] = item.product_template_id.name

  if gift_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["gift_project"] = item.product_template_id.name

  if VAS_update_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["VAS_update_project"] = item.product_template_id.name

  if deployment_delivery_order_project in item.product_template_id.x_studio_many2many_field_IExXi and not item.route_id:
    project_list["deployment_delivery_order_project"] = 1

  if it_board_project in item.product_template_id.x_studio_many2many_field_IExXi :
    #exclude the ipad addon kwickpos reprogram
    if item.product_template_id.id == 926 and (item.product_id.id == 5642 or item.product_id.id == 5643 or item.product_id.id == 5644 or item.product_id.id == 5645 or item.product_id.id == 5646 or item.product_id.id == 5647 or item.product_id.id == 5654 or item.product_id.id == 5655):
      continue
    project_list["it_board_project"] = 1

  if pos_bee_project in item.product_template_id.x_studio_many2many_field_IExXi :
    project_list["pos_bee_project"] = 1
    project_list.pop("it_board_project", None)

  if item.product_template_id.is_semi:
    project_list["semi_terminal_project"] = 1


if "it_board_project" in project_list.keys():
  project_list.pop("deployment_delivery_order_project", None)

#if an order's products are dropship,no need to generate deployment delivery task
# order_line_count = 0
# order_line_is_delivery = 0
# for line in record.order_line:
#   if line.product_uom_qty == 1:
#     order_line_is_delivery = order_line_is_delivery + 1
# for line in record.order_line:
#   if line.route_id and line.product_uom_qty == 1:
#     order_line_count = order_line_count+1
# if record.order_line and order_line_count==order_line_is_delivery:
#   project_list.pop("deployment_delivery_order_project", None)

for key in project_list.keys():

  if key == "VAS_update_project":
    parent = env['project.task'].sudo().create({

        'project_id': VAS_update_project.id,
        'name': record.name+": "+record.partner_id.name+ ","+str(project_list.get('VAS_update_project','')),
        'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
        'partner_id': int(record.partner_id.id),
        'user_id':user_jenny.id,
        'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
    })

  if key == "gift_project":
    parent = env['project.task'].sudo().create({

        'project_id': gift_project.id,
        'name': record.name+": "+record.partner_id.name+","+str(project_list.get('gift_project','')),
        'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
        'partner_id': int(record.partner_id.id),
        'user_id':user_sasa_liu.id,
        'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
    })

  if key == "tv_project":
    parent = env['project.task'].sudo().create({

        'project_id': tv_project.id,
        'name': record.name+": "+record.partner_id.name+","+str(project_list.get('tv_project','')),
        'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
        'partner_id': int(record.partner_id.id),
        'user_id':user_sasa_liu.id,
        'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
    })

  if key == "deployment_delivery_order_project":
    # stock = env['stock.picking'].sudo().search([('origin','=',record.display_name)], order="create_date desc")[0]

    deployment_delivery_order_task = env['project.task'].sudo().create({

        'project_id': deployment_delivery_order_project.id,
        'name': record.name+": "+record.partner_id.name,
        'date_deadline': 	datetime.date.today()+datetime.timedelta(days=6),
        'partner_id': int(record.partner_id.id),
        'user_id':user_eric_schofield.id,
        'additional_user_ids':[104,21,22],
        'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,

    })
    env['mail.activity'].create({
      'summary':'pre-approved/paid in full',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=6),
      'user_id':accounting_user.id,
      'res_id':deployment_delivery_order_task.id,
      'res_model_id':608,
      'activity_type_id':4})

  if key == "website_project":
    parent = env['project.task'].sudo().create({

        'project_id': website_project.id,
        'name': record.name+": "+record.partner_id.name+","+str(project_list.get('website_project','')),
        'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
        'partner_id': int(record.partner_id.id),
        'user_id':173,
        'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
    })
  if key == "semi_terminal_project":
    terminal_project_task = env['project.task'].sudo().create({

            'project_id': terminal_project.id,
            'name': "Semi terminal order:" + record.name,
            'date_deadline': 	datetime.date.today()+datetime.timedelta(days=5),
            'partner_id': int(record.partner_id.id),
            'additional_user_ids':[260,250,191],
            'x_studio_many2one_field_7MRZY':record.id,
            'sale_order_id':record.id,
            'x_studio_many2one_field_LEq7b':5,

        })
    record.write({'standalone_task':terminal_project_task.id})
    if record.sale_order_type == 'add_ons':
      terminal_project_task.write({
        'stage_id':171,
        'name': "Semi terminal order - addon:" + record.name ,                            })
  if key == "pos_bee_project":
    #create a pos_bee_project board task
    pos_bee_project_task = env['project.task'].sudo().create({

            'project_id': pos_bee_project.id,
            'name': record.name+": "+record.partner_id.name,
            'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
            'partner_id': int(record.partner_id.id),
            'user_id':user_sammy.id,
            'x_studio_many2one_field_7MRZY':record.id,
            'sale_order_id':record.id,
        })

  if key == "it_board_project":
    #create it implementation board project task

    rotation_cancel_user = env['rotation.canceled.user'].sudo().search([],limit=1,order="create_date asc")
    if rotation_cancel_user:
      record['x_studio_assign_to'] = rotation_cancel_user.user_id.id
      record['last_canceled_order'] = rotation_cancel_user.sale_order.id
      rotate_user = env['res.users'].sudo().search([('id','=',rotation_cancel_user.user_id.id)])
      if not rotate_user:
        raise UserError('Canceled order rotation user does not exist')
      channel_id = env['mail.channel'].search([
          ('name','=', 'Canceled order reminder')
      ])
      if channel_id:
        re = channel_id.message_post(
          subject="Canceled sale order reminder",
          body="the {canceled_sale_order} order is canceled, {user} are assigned to a new sale order {new_sale_order} "
          .format(canceled_sale_order=rotation_cancel_user.sale_order.name,user=rotation_cancel_user.user_id.name,new_sale_order=record.name),
          message_type='comment',
          subtype_id= env.ref('mail.mt_comment').id
         )
      rotation_cancel_user.unlink()
    else:
      it_board_users = env['ir.config_parameter'].get_param('it_implementation_board_rotate_list')
      user_list = it_board_users.split(",")
      it_board_users = []
      for tmp_user in user_list:
        it_board_users.append(int(tmp_user))
      it_board_users_count = env['ir.config_parameter'].get_param('it_implementation_board_rotate_list_count')
      it_board_users_count_index = int(it_board_users_count)%4
      rotate_user = env['res.users'].sudo().search([('id','=',it_board_users[it_board_users_count_index])])
      it_board_users_count = int(it_board_users_count)+1
      env['ir.config_parameter'].set_param('it_implementation_board_rotate_list_count',it_board_users_count)
      if not rotate_user:
        raise UserError('Rotation User does not exist')
      record['x_studio_assign_to'] = rotate_user
    #create a it implementation board task

    parent = env['project.task'].sudo().create({

            'project_id': it_board_project.id,
            'name': record.name+": "+record.partner_id.name,
            'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
            'partner_id': int(record.partner_id.id),
            'user_id':rotate_user.id,
            'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
        })

    #create a gmb follow up board task and activities
    gmb_follow_up_task = env['project.task'].sudo().create({

            'project_id': gmb_follow_up_project.id,
            'name': record.name+": "+record.partner_id.name,
            'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
            'partner_id': int(record.partner_id.id),
            'x_studio_many2one_field_7MRZY':record.id,
             'sale_order_id':record.id,
             'user_id':user_lisa_li.id  #Lisa Li
        })

    env['mail.activity'].create({
      'summary':'Request Access ( Send Post / Phone Call)',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':user_lisa_li.id, #lisa li
      'res_id':gmb_follow_up_task.id,
      'res_model_id':608,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'3rd Party has the access',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':user_lisa_li.id, #lisa li
      'res_id':gmb_follow_up_task.id,
      'res_model_id':608,
      'activity_type_id':4})
    env['mail.activity'].create({
      'summary':'Continue follow up with merchant',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':user_lisa_li.id, #lisa li
      'res_id':gmb_follow_up_task.id,
      'res_model_id':608,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'GMB Verified',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':user_lisa_li.id, #lisa li
      'res_id':gmb_follow_up_task.id,
      'res_model_id':608,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'Kwickmenu Link and Business Hours',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':rotate_user.id,
      'res_id':gmb_follow_up_task.id,
      'res_model_id':608,
      'activity_type_id':4})
    #create it implementation board activities
    #raise UserError("rotate_user")
    env['mail.activity'].create({
      'summary':'financial profile / online setting',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=11),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

        #create a activity to rotate user
    env['mail.activity'].create({
      'summary':'confirm cash discount',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'confirm sales tax',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=12),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'menu and configuration',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=12),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
    'summary':'pre-approved/paid in full',
    'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
    'user_id':accounting_user.id,
    'res_id':record.id,
    'res_model_id':466,
    'activity_type_id':4})


    env['mail.activity'].create({
    'summary':'update Lead POS System in IRIS',
    'date_deadline':datetime.date.today()+datetime.timedelta(days=10),
    'user_id':accounting_user.id,
    'res_id':record.id,
    'res_model_id':466,
    'activity_type_id':4})


    env['mail.activity'].create({
    'summary':'prepare hardware',
    'date_deadline':datetime.date.today()+datetime.timedelta(days=14),
    'user_id':prepare_hardware_user.id,
    'res_id':record.id,
    'res_model_id':466,
    'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'installment - On Site/Remote',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'ship/pick up',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'user_id':shipped_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'training',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'pos live date',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'online order live date',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=13),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'saas fee setup (If Apply)',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=15),
      'user_id':accounting_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'first follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=21),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})


    env['mail.activity'].create({
      'summary':'second follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=28),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

    env['mail.activity'].create({
      'summary':'third follow up call',
      'date_deadline':datetime.date.today()+datetime.timedelta(days=35),
      'user_id':rotate_user.id,
      'res_id':record.id,
      'res_model_id':466,
      'activity_type_id':4})

  if key == "depolyment_project":
    #create it depolyment_project task
    if record.company_id.id == 2:
      # raise UserError(record.company_id.id)
      parent = env['project.task'].sudo().create({

              'project_id': depolyment_project.id,
              'name': record.name+": "+record.partner_id.name,
              'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
              'partner_id': int(record.partner_id.id),
              'user_id':user_myles_ball.id,
              'x_studio_many2one_field_7MRZY':record.id,
          'sale_order_id':record.id,
          })
    if record.company_id.id == 1:
      parent = env['project.task'].sudo().create({

              'project_id': depolyment_project.id,
              'name': record.name+": "+record.partner_id.name,
              'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
              'partner_id': int(record.partner_id.id),
              'user_id':prepare_hardware_user.id,
              'x_studio_many2one_field_7MRZY':record.id,
          'sale_order_id':record.id,
          })
  if key == "Installment_project":

    parent = env['project.task'].sudo().create({

            'project_id': Installment_project.id,
            'name': record.name+": "+record.partner_id.name,
            'date_deadline': 	datetime.date.today()+datetime.timedelta(days=14),
            'partner_id': int(record.partner_id.id),
            'user_id':prepare_hardware_user.id,
            'x_studio_many2one_field_7MRZY':record.id,
        'sale_order_id':record.id,
        })</field>

		<field name="active" eval="True"/>
		<field name="trigger">on_write</field>
		<field name="filter_domain">[("state","=","sale"),"|",("company_id","=",1),("company_id","=",2)]</field>
		<field name="filter_pre_domain">["|",("company_id","=",1),("company_id","=",2)]</field>
	</record>


</odoo>